# -*- coding: utf-8 -*-
"""SingleLayerPerceptron

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wYS9VLuWJJiHmmxm5FC-8IwhZw3fL6cm

# Import Necessary Libraries
"""

import numpy as np
import pandas as pd
from tensorflow import keras
import matplotlib.pyplot as plt

"""# Load the dataset using "Keras" from the imported version of tensor flow.

"""

(X_train,y_train),(X_test,y_test)=keras.datasets.mnist.load_data()

#Display the shape and image of the single image in the dataset.The image size contains a 28*28 #matrix and length of the training set is 60,000 and testing set is 10,000
print(f"Training set:{X_train.shape}")
print(f"Testing set:{X_test.shape}")
print(X_train[1].shape)
plt.matshow(X_train[1])

"""# Normalizing the dataset"""

x_train=X_train/255
x_test=X_test/255
#Flatting the dataset in order to compute for model building
x_train_flatten=x_train.reshape(len(x_train),28*28)
x_test_flatten=x_test.reshape(len(x_test),28*28)
x_train_flatten.shape

"""# Building a neural network with single-layer perceptron."""

model=keras.Sequential([
    keras.layers.Dense(10,input_shape=(784,),activation='sigmoid')
])
model.compile(
     optimizer='adam',
     loss='sparse_categorical_crossentropy',
     metrics=['accuracy'])
model.fit(x_train_flatten,y_train,epochs=5)

"""# Output the accuracy of the model on the testing data."""

model.evaluate(x_test_flatten,y_test)